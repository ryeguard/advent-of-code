//go:build ignore

package main

import (
	"flag"
	"go/token"
	"os"
	"strconv"
	"strings"
	"text/template"

	"golang.org/x/tools/go/packages"
)

const mode packages.LoadMode = packages.NeedName

type day struct {
	Id   int
	Name string
}

func main() {

	pattern := flag.String("pattern", "./...", "Go package pattern")

	var fileSet = token.NewFileSet()
	cfg := &packages.Config{Fset: fileSet, Mode: mode, Dir: "."}

	pkgs, err := packages.Load(cfg, *pattern)
	if err != nil {
		panic(err)
	}

	var days []day
	for _, pkg := range pkgs {
		if !strings.HasPrefix(pkg.Name, "day") {
			continue
		}

		trimmed := strings.TrimPrefix(pkg.Name, "day")
		n, err := strconv.Atoi(trimmed)
		if err != nil {
			panic(err)
		}

		days = append(days, day{
			Id:   n,
			Name: pkg.Name,
		})
	}

	f, err := os.Create("solution_gen.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Days []day
	}{
		Days: days,
	})

}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

import (
{{- range .Days }}
	"{{"github.com/ryeguard/advent-of-code/2024/"}}{{ printf "%s" .Name }}"
{{- end }}
)

var solutionFuncs = [](func([]string) (int, int, error)){
{{- range .Days }}
	{{.Id}}: {{ printf "%s" .Name }}.Solution,
{{- end }}
}
`))
